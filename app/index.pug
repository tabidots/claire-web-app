//output: index.html, pretty: false

doctype html
html.no-fouc
  head
    include ../head.pug
    link(rel='stylesheet', type='text/css', href='../css/common.css')
    link(rel='stylesheet', type='text/css', href='../css/app.css')
  body
    #blanket
    #app(v-on:click='reset($event)', v-touch:press='toggleDemoMode($event)', v-touch-options:press='{ time: 1000 }')
      
      // Bottom fixed face, only for mobile; stay visible until user inputs first entry
      a(href="../")
        #fixed-claire-face(v-bind:class="[paragraphs.length ? '' : 'no-entries']")
              
      #input(onmouseleave='hideBlanket()', onblur='hideBlanket()')
        .mobile-only
          .demo-mode(v-if='demoMode', transition='float-right') demo mode
        #input-left
          a(href="../")
            .claire-face
              .demo-mode(v-if='demoMode', transition='float-right') demo mode
        #input-right
          .bubble
            textarea#input-box(lang='{{ language }}', 
                               v-model="input", 
                               v-on:keypress.enter='addParagraph($event)', 
                               placeholder='{{ help.inputPrompt[language] || help.inputPrompt.en }}',
                               onfocus='focusOnInput()',
                               onblur='hideBlanket()',
                               onresize='lazyResize()')
            a.button.down.mic(href='#', v-if="speechRecognizer",
                                        v-on:click="toggleVoice",
                                        v-bind:class="[isListeningToVoice ? 'active' : '']")
            a.button.left.pink.help(href='#', v-on:mouseup.prevent='toggleHelp', 
                                              v-on:touchstart.prevent='toggleHelp',
                                              v-bind:class="[helpIsOn ? 'rotate' : '']")
            a.button.right.green.magic#send-input(href="#", v-on:mouseup='addParagraph($event)', 
                                                            v-bind:class="[waitingForAPI ? 'loading' : '']")
                                                                      
      #output
        paragraph(v-for='(paraIndex, paragraph) in paragraphs', transition='expand',
                  :paragraph='paragraph', :para-index='paraIndex', :total-paragraphs='totalParagraphs')

      template#paragraph
        .paragraph
          .table-wrapper
      
            // LEFT SIDE - Original text =======================================
            .paragraph-left
              p {{ paragraph[0][0].original }}
              // MOBILE ONLY
              .mobile-only
                // If sentence is correct, show a green check mark; else a purple zoom button with paragraph "meta-data"
                .is-correct(v-if="noAnnotations")
                a.button.purple.zoom(href='#', v-else, v-on:mouseup.prevent='toggleMobileParagraphInfo', 
                                                       v-on:touchstart.stop.prevent='toggleMobileParagraphInfo',
                                                       v-bind:class="[showingMobileAnnotations ? 'minus' : '']")
                  
            // CENTER - MOBILE ONLY - Paragraph info + all annotations =========
            .paragraph-center(v-bind:class="[showingMobileAnnotations ? 'slide-down' : 'slide-up']")
              div(v-bind:class="[showingMobileAnnotations ? 'slide-down' : 'slide-up']")
                paragraph-info(:annotation-count='annotationCount', 
                               :entry-number='entryNumber',
                               :original='paragraph[0][0].original', 
                               :firstpass='paragraph[0][0].firstpass',
                               :allchanges='paragraph[0][0].allchanges')
                annotation(v-for='annotation in allAnnotations', :annotation='annotation')
          
            // RIGHT SIDE - Claire output ======================================
            .paragraph-right
              .sentence(v-for='(sentIndex, sentence) in paragraph',
                        :para-index='paraIndex', :sent-index='sentIndex')
                syntagma(v-for='(syntagmaIndex, syntagma) in sentence',
                         :syntagma='syntagma', :para-index='paraIndex', 
                         :sent-index='sentIndex', :syntagma-index="syntagmaIndex",
                         v-bind:class="[syntagma.annotations.length ? 'flagged' : '', \
                                        syntagma.afterspace ? 'afterspace' : '', \
                                        syntagma.multiplechoice ? 'multiple-choice' : '']")                      
          
            // STUBS - WIDE VIEW ONLY ==========================================
            // Stub 1: zoom button for full-size view
            .paragraph-stub
              // If sentence is correct, show a green check mark; else a purple zoom button with paragraph "meta-data"
              .is-correct(v-if="noAnnotations")
              .syntagma(v-else)
                a.button.purple.zoom(v-on:mouseup='toggleFullParagraphInfo', 
                                     v-on:touchstart.stop.prevent='toggleFullParagraphInfo',
                                     onmouseenter='toggleHover(this)', onmouseleave='toggleHover(this)',
                                     ontouchstart='toggleHover(this)', ontouchend='toggleHover(this)',
                                     v-bind:class="[showingParagraphInfo ? 'minus' : '']")
                .annotation-block.paragraph-annotations(v-if='showingParagraphInfo', 
                                                        v-on:click.stop.prevent='')
                  paragraph-info(:annotation-count='annotationCount', 
                                 :entry-number='entryNumber',
                                 :original='paragraph[0][0].original', 
                                 :firstpass='paragraph[0][0].firstpass',
                                 :allchanges='paragraph[0][0].allchanges',
                                 :revision='paragraph[0][0].revision')
                  annotation(v-for='annotation in paragraph[0][0].annotations', :annotation='annotation')
            // Stub 2: copy button
            .paragraph-stub(v-if="!iOS")
              a.button.orange.copy(v-on:mouseup.stop='copyRevision', 
                                   v-on:touchstart.stop.prevent='copyRevision',
                                   v-on:mouseleave='destroyCopybox',
                                   onmouseenter='toggleHover(this)', onmouseleave='toggleHover(this)',
                                   ontouchstart='toggleHover(this)', ontouchend='toggleHover(this)',
                                   v-bind:class="[showingCopybox ? 'minus' : '']")
              .copybox(v-if='copyboxExists', v-bind:class="[showingCopybox ? 'visible' : '']") Ctrl (Command) + C to copy.
                input(type='text', value='{{ paragraph[0][0].revision }}')
              .successbox(v-if='showingSuccessbox', transition='float-left') The text has been copied.
                         
      template#syntagma
        .syntagma(v-on:mouseenter='focus', 
                  v-on:mouseleave='unfocus', 
                  v-on:touchstart='unfocusAndFocus($event)')
          .highlight(v-bind:class="highlightStatus")
          a.button.purple.single.zoom(v-if='syntagma.annotations.length && showingLabel', 
                                      transition='float-up',
                                      v-on:touchstart.stop='showAnnotations', 
                                      v-on:mouseup.prevent='showAnnotations')
          span.chunk {{ syntagma.words }}
          .underlines
            .underline(v-for="n in height")
          .label(v-if='showingLabel', transition='float-down')
            span.category {{ syntagma.type }}
            span.tense(v-for='tense in syntagma.tense') {{ tense }}
          .annotation-block(v-if='showingAnnotations')
            annotation(v-for='annotation in syntagma.annotations', :annotation='annotation')
                          
      template#annotation
        .annotation
          h1(v-bind:class="[annotation.alternatives.length ? 'multiple-choice' : '']") {{ annotation.type }}
          p.explanation(v-bind:class="[annotation.alternatives.length ? 'multiple-choice' : '']") {{{ annotation.explanation | markdown }}}
          ul
            li
              h3 original:
              div
                span {{{ annotation.original | markdown }}}
                .icon.cross
            template(v-if='annotation.revision != "(dependent on context)"')
              li
                h3 revision:
                div 
                  span {{ annotation.revision }}
                  .icon.check
            template(v-if="annotation.alternatives.length")
              li
                h3 alternatives:
                div
                  ul
                    li(v-for='alternative in annotation.alternatives') {{ alternative }}
                    
      template#paragraph-info
        .annotation
          h1 Entry &#35;{{ entryNumber }}
          p
          ul
            li
              h3 original:
              div {{ original }}
            li
              h3 revision 1:
              div {{{ firstpass }}}
            li
              h3 revision 2:
              div {{{ allchanges }}}
            li
              h3 categories:
              div.categories
                ul
                  li.category(v-for='(type, count) in annotationCount') 
                    | {{ type }} 
                    // Assign different colors for different numbers
                    span.number(v-bind:class="[3 <= count && count <= 5  ? 'medium' : '', \
                                              count > 5 ? 'high' : '']")
                      span {{ count }}
    
      #language-panel(v-if='helpIsOn', 
                      v-touch:pan='panLanguages($event)', 
                      v-on:contextmenu.stop.prevent='', 
                      transition='expand-up')
        include ../langpanel.pug
      #help(v-if='helpIsOn', transition='expand-up')
        .row#help-syntagma-one
          .syntagma
            .highlight.subject
            .chunk(lang='{{ language }}') {{ help.subject[language] || help.subject.en }}
          .arrow.left
          .syntagma
            .highlight.active
            .pointy-hand
            .chunk(lang='{{ language }}') {{ help.verb[language] || help.verb.en }}
            .label
              span.tense(lang='{{ language }}') {{ help.tense[language] || help.tense.en }}
          .arrow.right
          .syntagma
            .highlight.object
            .chunk(lang='{{ language }}') {{ help.object[language] || help.object.en }}
    
        .row#help-syntagma-two
          .syntagma
            .highlight.active
            .pointy-hand
            .chunk(lang='{{ language }}') {{ help.complexPhrase[language] || help.complexPhrase.en }}
          .arrow.right
          .syntagma
            .highlight.dependent
            .chunk(lang='{{ language }}') {{ help.modifyingPhrase[language] || help.modifyingPhrase.en }}
            .underline
        
        .row#help-annotation-row
          .left-side
            .mini-annotation.purple
            .arrow.left
            .syntagma.big.flagged
              .button.purple.zoom.single
              .pointy-hand
              .chunk(lang='{{ language }}') {{ help.purpleWords[language] || help.purpleWords.en }}
          .right-side
            .syntagma.big.multiple-choice
              .button.purple.zoom.single
              .pointy-hand
              .chunk(lang='{{ language }}') {{ help.orangeWords[language] || help.orangeWords.en }}
            .arrow.right
            .mini-annotation.orange
            
        .row#help-button-row
          .left-side
            p(lang='{{ language }}') {{ help.seeMoreInfo[language] || help.seeMoreInfo.en }}
            .button.purple.zoom(onmouseenter='toggleHover(this)', onmouseleave='toggleHover(this)',
                                ontouchstart='toggleHover(this)', ontouchend='toggleHover(this)')
          .right-side
            .button.orange.copy(onmouseenter='toggleHover(this)', onmouseleave='toggleHover(this)',
                                ontouchstart='toggleHover(this)', ontouchend='toggleHover(this)')
            p(lang='{{ language }}') {{ help.copyToClipboard[language] || help.copyToClipboard.en }}
          
    include ../footer.pug
    
    script(src='//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js')
    script(src='../js/claire.common.min.js')
    
    script(src='//cdnjs.cloudflare.com/ajax/libs/classlist/2014.01.31/classList.min.js')
    
    script(src='//cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js')
    script(src='../js/micromarkdown.js')
    script(src='../js/smartquotes.min.js')
    script(src='../js/javascript.fullPage.min.js')
  
    script(src='../js/vue.min.js')
    script(src='../js/vue-touch.min.js')
    script(src='../js/vue-resource.min.js')

    script(src='../js/zenscroll-min.js')
    
    script(src='../js/claire.app.min.js')
    
    script(type="text/javascript").
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-80428623-1', 'auto');
      ga('send', 'pageview');
